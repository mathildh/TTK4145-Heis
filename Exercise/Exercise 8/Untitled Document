with Ada.Text_IO, Ada.Integer_Text_IO, Ada.Numerics.Float_Random;
use  Ada.Text_IO, Ada.Integer_Text_IO, Ada.Numerics.Float_Random;

procedure exercise7 is

    Count_Failed    : exception;    -- Exception to be raised when counting fails
    Gen             : Generator;    -- Random number generator

    protected type Transaction_Manager (N : Positive) is
        entry Finished;
        function Commit return Boolean;
        procedure Signal_Abort;
    private
        Finished_Gate_Open  : Boolean := False;
        Aborted             : Boolean := False;
        Should_Commit       : Boolean := True;
    end Transaction_Manager;
    protected body Transaction_Manager is
        entry Finished when Finished_Gate_Open or Finished'Count = N is
        begin
            ------------------------------------------
            -- PART 3: Complete the exit protocol here
            ------------------------------------------


            if Finished'Count /=0 then 
                Finished_Gate_Open := True;
                Should_Commit := True;
                Aborted := False;
            else
                Finished_Gate_Open := False;
                Aborted := True;
            end if;

            if Aborted = True then
                Should_Commit := False;
                Aborted := False;       
            else
                Should_Commit:= True;
            end if;
        end Finished;

        procedure Signal_Abort is
        begin
            Aborted := True;
        end Signal_Abort;

        function Commit return Boolean is
        begin
            return Should_Commit;
        end Commit;
        
    end Transaction_Manager;



    
    function Unreliable_Slow_Add (x : Integer) return Integer is
    Error_Rate : Constant := 0.15;  -- (between 0 and 1)
    begin 
        -------------------------------------------
        -- PART 1: Create the transaction work here
        -------------------------------------------

        if Random(Gen) > Error_Rate then
            d = 3.0*Random(Gen);
            delay Duration(d);
            return x + 10;

        else
            delay Duration(0.5);
            raise Count_Failed;
        end if;

